#------- environment related -------

goto_environment_tab:
  action: click_on_environment_tab
  elements:
  - selector:
      xpath: //environment
    optional: true
click_on_environment_tab:
  element:
    selector:
      xpath: //uib-tab-heading[contains(.,'Environment')]
    op: click
    timeout: 20
create_app_from_image_add_dc_env_vars:
  elements:
  - selector:
      xpath: //osc-form-section[@header="Deployment Configuration"]//a[text()='Add Value']
    op: click
  - selector:
      xpath: //osc-form-section[@header="Deployment Configuration"]//div[contains(@class,"key-value-editor-entry")][last()-1]/div[1]//input
    op: send_keys <dc_env_key>
  - selector:
      xpath: //osc-form-section[@header="Deployment Configuration"]//div[contains(@class,"key-value-editor-entry")][last()-1]/div[2]//input
    op: send_keys <dc_env_value>
create_app_from_image_add_bc_env_vars:
  elements:
  - selector:
      xpath: //osc-form-section[@header="Build Configuration"]//a[normalize-space(text())='Add Environment Variable']
    op: click
  - selector:
      xpath: //osc-form-section[@header="Build Configuration"]//div[contains(@class,"key-value-editor-entry")][last()-1]/div[1]//input
    op: send_keys <bc_env_key>
  - selector:
      xpath: //osc-form-section[@header="Build Configuration"]//div[contains(@class,"key-value-editor-entry")][last()-1]/div[2]//input
    op: send_keys <bc_env_value>
add_env_vars:
  action: add_new_env_var
  action: add_env_var_key
  action: add_env_var_value
add_new_env_var:
  action:
    if_element:
      selector:
        text: Add Value
      type: a
    ref: click_add_value
  action:
    if_element:
      selector:
        text: Add Environment Variable
      type: a
    ref: click_add_environment_variable
click_add_value:
  element:
    selector:
      xpath: //a[normalize-space(text())='Add Value']
    op: click
click_add_environment_variable:
  element:
    selector:
      xpath: //a[normalize-space(text())='Add Environment Variable']
    op: click
add_env_var_key:
  element:
    selector:
      xpath: //div[@ng-repeat="entry in entries"][count(//div[@ng-repeat="entry in entries"])]/div[1]/input
    op: send_keys <env_var_key>
add_env_var_value:
  element:
    selector:
      xpath: //div[@ng-repeat="entry in entries"][count(//div[@ng-repeat="entry in entries"])]/div[2]//input
    op: send_keys <env_var_value>
add_env_var_for_dc_container:
  action: add_env_var_key_for_dc_container
  action: add_env_var_value_for_dc_container
add_env_var_key_for_dc_container:
  elements:
  - selector:
      xpath: //div[h3[text()='Environment Variables']]/div[div/h4[contains(text(),'<container_name>')]]//a[text()='Add Value']
    op: click
  - selector:
      xpath: //h4[contains(text(),'<container_name>')]/ancestor::div[@ng-repeat]//div[@ng-repeat='entry in entries'][last()]/div[1]//input
    op: send_keys <env_var_key>
add_env_var_value_for_dc_container:
  elements:
  - selector:
      xpath: //h4[contains(text(),'<container_name>')]/ancestor::div[@ng-repeat]//div[@ng-repeat='entry in entries'][last()]/div[2]//input
    op: send_keys <env_var_value>
add_env_name_and_value_on_deploy_image_page:
  elements:
  - selector:
      xpath: //osc-form-section[@header="Environment Variables"]/descendant::div//input[@placeholder="Name"]
    op: send_keys <env_var_key>
  - selector:
      xpath: //osc-form-section[@header="Environment Variables"]/descendant::div//input[@placeholder="Value"]
    op: send_keys <env_var_value>
add_env_var_using_configmap_or_secret:
  action: click_add_env_var_using_configmap_or_secret
  action: add_env_var_key
  action: select_env_var_resource
  action: select_env_var_key
add_all_var_from_configmap_or_secret:
  action: click_add_all_values_from_configmap_or_secret
  action: select_env_var_resource
click_add_env_var_using_configmap_or_secret:
  elements:
  - selector:
      xpath: //a[normalize-space(text())='Add Value from Config Map or Secret']
    op: click
click_add_all_values_from_configmap_or_secret:
  elements:
  - selector:
      xpath: //a[normalize-space(text())='Add ALL Values from Config Map or Secret']
    op: click
check_view_details_on_env_tab:
  action: click_view_details
  action: check_page_contain_text
  action: click_close
click_clear_changes:
  elements:
  - selector:
      text: Clear Changes
    type: a
    op: click
select_env_var_resource:
  elements:
  - selector:
      xpath: (//div[@placeholder='Select a resource'])[last()]
    op: click
  - selector:
      xpath: //ul//div[span/span[normalize-space(text())='<resource_name>']]
    op: click
select_env_var_key:
  elements:
  - selector:
      xpath: (//key-value-editor//div[@placeholder='Select key'])[last()]
    op: click
  - selector:
      xpath: //ul//div[span/span[normalize-space(text())='<resource_key>']]
    op: click
change_env_vars:
  action: edit_env_var_value
edit_env_var_key:
  elements:
  - selector: &env_var_key_field |
        var id = null
        var p = new RegExp("<env_var_value>");
        var el = document.getElementsByTagName("input");
        for (var i=0; i<el.length; i++) {
          if (p.test(el[i].value)) {
            id = el[i].id;
            break;
          }
        }
        if (id == null) return null;
        id = id.replace(/value(?!.*value)/, 'key');
        return document.getElementById(id);
    type: js
    op: clear
  - selector: *env_var_key_field
    type: js
    op: send_keys <new_env_key>
edit_env_var_value:
  elements:
  - selector: &env_var_value_field |
        var id = null
        var p = new RegExp("<env_variable_name>");
        var el = document.getElementsByTagName("input");
        for (var i=0; i<el.length; i++) {
          if (p.test(el[i].value)) {
            id = el[i].id;
            break;
          }
        }
        if (id == null) return null;
        id = id.replace("-key-", "-value-");
        return document.getElementById(id);
    type: js
    op: clear
  - selector: *env_var_value_field
    type: js
    op: send_keys <new_env_value>

delete_env_var:
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
    - command: |
             var key = "<env_var_key>"
             var rows = document.querySelectorAll('div[class~=key-value-editor-entry]')
             for (var i =0; i< rows.length; i++) {
                 var inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input')
                 if (inputs.length==2 && inputs[0].value == key) {
                     rows[i].querySelector(".key-value-editor-buttons a").click()
                     return true
                 }
             }
             return false
      expect_result: true
delete_env_var_from_configmap_or_secret:
  elements:
  - selector:
      xpath: //div[contains(@class,'environment-from-editor')]//span
  scripts:
    - command: |
             var key = "<env_var_key>"
             var rows = document.querySelectorAll('div[class~=environment-from-editor] div[class~=environment-from-entry]')
             for (var i =0; i< rows.length; i++) {
                 var inputs = rows[i].querySelectorAll('div[class~=environment-from-input] span')
                 if (inputs.length > 0 && inputs[0].innerText.includes(key)) {
                     rows[i].querySelector("div[class~=environment-from-editor-button] a").click()
                     return true
                 }
             }
             return false
      expect_result: true

reorder_environment_variable:
  scripts:
  - file: jquery.simulate.drag-sortable
    expect_result: true
  - command: |
        var id = null,
            p = new RegExp("<env_variable_name>"),
            el = document.getElementsByTagName("input"),
            div_el = {},
            offset = parseInt("<offset>");
            move = ("<direction>" == "down") ? offset : -1*offset;
        for (var i=0; i<el.length; i++) {
          if (p.test(el[i].value)) {
            res_el = el[i];
            break;
          }
        }
        if (res_el.id == null) return null;
        div_el = res_el.parentElement.parentElement;
        $(div_el).simulateDragSortable({ move: move, handle: ".as-sortable-item-handle"});
        return true;
    expect_result: true
check_environment_variables_order:
  scripts:
  - command: |
        var patterns = "<env_vars_order>".split(",").map(function(v){return new RegExp(v);}),
            els = document.getElementsByTagName("input").filter(function(el){return el.id.startsWith("key-value-editor-key");})
        for (var i=0; i<els.length; i++) {
          if (patterns[0].test(els[i].value)) {
            if (patterns.length == 1) {
              return true;
            }
            patterns.shift()
          }
        }
        return false;
    expect_result: true

click_show_parameter_value:
  elements:
  - selector:
      xpath: //a[contains(.,'Show parameter values')]
    op: click
check_parameter_value:
  action: click_show_parameter_value
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  params:
    env_var_key: ADMIN_PASSWORD
  action: check_env_var_key
  params:
    env_var_key: MYSQL_USER
  action: check_env_var_key
check_env_var_key:
  scripts:
  - command: |
        var key = "<env_var_key>",
            rows = document.querySelectorAll('div[class~=key-value-editor-entry]'),
            inputs = [];
        for (var i =0; i< rows.length; i++) {
          inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input');
          if (inputs.length > 0 && inputs[0].value == key) {
            return true;
          }
        }
        return false;
    expect_result: true

check_environment_tab:
  action: check_environment_variable
check_environment_variable:
  element:
    selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
  - command: |
        var key = "<env_var_key>",
            value = "<env_var_value>",
            rows = document.querySelectorAll('div[class~=key-value-editor-entry]');
        for (var i =0; i< rows.length; i++) {
          let inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input');
          if (inputs.length == 2) {
            if (inputs[0].value == key && inputs[1].value == value)
              return true;
          } else if (inputs.length == 1) {
            let div = rows[i].querySelectorAll('div[class~=key-value-editor-input] div div div');
            if (inputs[0].value == key && div.length == 1 && div[0].textContent.replace(/(\n+)/gm," ").includes(value))
              return true;
          }
        }
        return false;
    expect_result: true
check_env_tab_for_dc_container:
  scripts:
    - command: |
             var key = "<env_var_key>"
             var value = "<env_var_value>"
             var pattern = new RegExp("<container_name>")
             var editors = document.querySelectorAll('key-value-editor')
             for (var i =0; i< editors.length; i++) {
               if (pattern.test(editors[i].previousElementSibling.innerHTML)) {
                 var inputs = editors[i].querySelectorAll('div[class~=key-value-editor-input] input')
                 for (var j=0;j<inputs.length;j=j+2) {
                   if (inputs[j].value == key && inputs[j+1].value == value) {
                   return true
                   }
                 }
                 return false
               }
             }
             return false
      expect_result: true
check_configmap_or_secret_env_var:
  element:
    selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
  - command: |
        var key = "<env_var_key>",
            resource = "<resource_name>",
            resource_key = "<resource_key>",
            rows = document.querySelectorAll('div[class~=key-value-editor-entry]');
        for (var i =0; i< rows.length; i++) {
          let cells = rows[i].querySelectorAll('div[class~=key-value-editor-input]');
          if (cells.length == 2) {
            if (cells[0].getElementsByTagName("input")[0].value == key) {
              let dd_menu_values = cells[1].querySelectorAll('div[class~=ui-select-match] span[class~=ui-select-match-text] span');
              if (dd_menu_values[0].innerText.includes(resource) && dd_menu_values[1].innerText.includes(resource_key)) {
                return true;
              }
            }
          }
        }
        return false;
    expect_result: true
check_empty_buildconfig_environment:
  action: goto_buildconfig_environment_tab
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-entry')]
  scripts:
    - command: |
             var rows = document.querySelectorAll('div[class~=key-value-editor-entry]')
             for (var i =0; i< rows.length; i++) {
                 var inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input')
                     if (inputs.length == 2 && (inputs[0].value != "" || inputs[1].value != "")) {
                           return false
                               }
             }
             return true
      expect_result: true
check_env_var_missing:
  elements:
  - selector:
      xpath: //div[contains(@class,'key-value-editor-input')]/input
  scripts:
    - command: |
            var key = "<env_var_key>",
                value = "<env_var_value>",
                rows = document.querySelectorAll('div[class~=key-value-editor-entry]'),
                inputs = [];
            for (var i =0; i< rows.length; i++) {
              inputs = rows[i].querySelectorAll('div[class~=key-value-editor-input] input');
              if (inputs.length == 2 && inputs[0].value == key && inputs[1].value == value) {
                return false;
              }
            }
            return true;
      expect_result: true
check_env_from_configmap_or_secret:
  elements:
  - selector:
      xpath: //span[contains(text(),'<resource_name>')]/small[contains(text(),'<resource_type>')]
